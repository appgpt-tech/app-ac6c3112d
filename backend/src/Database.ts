//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { EssentialItemCategoryEntity } from './db/EssentialItemCategory.entity';
import { ShoppingListEntity } from './db/ShoppingList.entity';
import { PriceComparisonEntity } from './db/PriceComparison.entity';
import { DietaryPreferencesEntity } from './db/DietaryPreferences.entity';
import { GroceryStoreEntity } from './db/GroceryStore.entity';
import { UserAccountEntity } from './db/UserAccount.entity';
import { ListHistoryEntity } from './db/ListHistory.entity';
import { ExpirationDateReminderEntity } from './db/ExpirationDateReminder.entity';
import { BudgetTrackerEntity } from './db/BudgetTracker.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      EssentialItemCategoryEntity,
      ShoppingListEntity,
      PriceComparisonEntity,
      DietaryPreferencesEntity,
      GroceryStoreEntity,
      UserAccountEntity,
      ListHistoryEntity,
      ExpirationDateReminderEntity,
      BudgetTrackerEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      EssentialItemCategory: [
        {
          Name: 'Dairy Products',
          Description:
            'Includes milk, cheese, yogurt, and other dairy items essential for daily nutrition.',
          Image: 'dairy_products_image_url',
        },
        {
          Name: 'Vegetables',
          Description:
            'A variety of fresh vegetables to meet your daily dietary needs.',
          Image: 'vegetables_image_url',
        },
        {
          Name: 'Fruits',
          Description:
            'Fresh fruits ranging from apples to bananas, essential for vitamins and minerals.',
          Image: 'fruits_image_url',
        },
        {
          Name: 'Bakery',
          Description:
            'Freshly baked bread, pastries, and other bakery items for your daily needs.',
          Image: 'bakery_image_url',
        },
        {
          Name: 'Meats',
          Description:
            'A selection of fresh and processed meats, including chicken, beef, and pork.',
          Image: 'meats_image_url',
        },
      ],
      ShoppingList: [
        {
          Name: 'Weekly Essentials',
          Items: 'Milk, Eggs, Bread, Apples, Bananas',
          Quantity: 5,
          Notes: 'Get low-fat milk and gluten-free bread',
        },
        {
          Name: 'Vegetarian Picks',
          Items: 'Tofu, Lettuce, Carrots, Mushrooms, Almond Milk',
          Quantity: 5,
          Notes: 'Check for fresh lettuce and mushrooms',
        },
        {
          Name: 'Family Dinner',
          Items: 'Chicken Breasts, Broccoli, Rice, Oranges, Ice Cream',
          Quantity: 5,
          Notes: 'Organic chicken and broccoli preferred',
        },
        {
          Name: 'Healthy Snacks',
          Items:
            'Greek Yogurt, Granola, Mixed Nuts, Dark Chocolate, Blueberries',
          Quantity: 5,
          Notes: 'Unsalted nuts and 70% cocoa chocolate',
        },
        {
          Name: 'Breakfast Staples',
          Items:
            'Oatmeal, Strawberries, Honey, Almond Butter, Whole Grain Bread',
          Quantity: 5,
          Notes: 'Raw honey and no added sugar almond butter',
        },
      ],
      PriceComparison: [
        {
          ProductName: 'Organic Milk',
          Brand: "Nature's Promise",
          Quantity: 1,
          Price: 3.99,
          Quality: 4.5,
          UserRating: 4.7,
          UserExperience:
            'Tastes fresh and lasts longer than other brands. Definitely worth the price.',
        },
        {
          ProductName: 'Whole Wheat Bread',
          Brand: "Dave's Killer Bread",
          Quantity: 1,
          Price: 5.29,
          Quality: 4.8,
          UserRating: 4.9,
          UserExperience:
            "Best whole wheat bread I've ever had. It's soft, nutritious, and delicious.",
        },
        {
          ProductName: 'Free Range Eggs',
          Brand: 'Happy Egg Co.',
          Quantity: 12,
          Price: 4.49,
          Quality: 4.6,
          UserRating: 4.8,
          UserExperience:
            "Eggs are always fresh, and the yolks are rich in color. Love that they're ethically sourced.",
        },
        {
          ProductName: 'Almond Butter',
          Brand: "Justin's",
          Quantity: 1,
          Price: 7.99,
          Quality: 4.7,
          UserRating: 4.5,
          UserExperience:
            'Smooth, creamy, and has just the right amount of sweetness. Great for keto diets.',
        },
        {
          ProductName: 'Organic Spinach',
          Brand: 'Earthbound Farm',
          Quantity: 1,
          Price: 3.49,
          Quality: 4.4,
          UserRating: 4.6,
          UserExperience:
            "Always fresh and clean. Lasts longer than other brands I've tried and is perfect for salads.",
        },
      ],
      DietaryPreferences: [
        {
          Name: 'Vegan',
          Description: 'Excludes all forms of animal products and by-products.',
          RecommendedProducts: 'Tofu, Lentils, Quinoa, Almond milk',
          Restrictions: 'No meat, dairy, eggs, or honey',
        },
        {
          Name: 'Gluten-Free',
          Description: 'Avoids all foods containing gluten.',
          RecommendedProducts: 'Rice, Corn, Gluten-free bread, Quinoa',
          Restrictions: 'No wheat, barley, rye',
        },
        {
          Name: 'Ketogenic',
          Description: 'High-fat, adequate-protein, low-carbohydrate diet.',
          RecommendedProducts: 'Avocados, Coconut oil, Salmon, Cheese',
          Restrictions: 'Limited carbs, no sugar',
        },
        {
          Name: 'Paleo',
          Description:
            'Focuses on consuming foods that were available in the Paleolithic era.',
          RecommendedProducts: 'Grass-fed meat, Nuts, Seeds, Fruits',
          Restrictions: 'No processed foods, dairy, grains',
        },
        {
          Name: 'Low FODMAP',
          Description:
            'Reduces foods that are high in certain fermentable carbohydrates.',
          RecommendedProducts: 'Eggs, Grapes, Oranges, Lactose-free dairy',
          Restrictions: 'No onions, garlic, wheat, rye',
        },
      ],
      GroceryStore: [
        {
          Name: 'FreshMart',
          Location: '123 Green Lane, Springfield',
          ContactInformation: '(555) 123-4567',
          OpeningHours: '8AM - 9PM',
          Products: 'Milk, Eggs, Bread, Apples, Oranges',
          Ratings: 4.5,
        },
        {
          Name: 'Organic Harvest',
          Location: '456 Oak Street, Riverdale',
          ContactInformation: '(555) 234-5678',
          OpeningHours: '7AM - 8PM',
          Products: 'Organic Vegetables, Grass-fed Beef, Free-range Chicken',
          Ratings: 4.8,
        },
        {
          Name: 'Budget Grocer',
          Location: '789 Pine Road, Lakeside',
          ContactInformation: '(555) 345-6789',
          OpeningHours: '9AM - 10PM',
          Products: 'Canned Goods, Rice, Pasta, Frozen Vegetables, Snacks',
          Ratings: 3.9,
        },
        {
          Name: 'Gourmet Pantry',
          Location: '101 Maple Avenue, Uptown',
          ContactInformation: '(555) 456-7890',
          OpeningHours: '10AM - 6PM',
          Products: 'Cheese, Wine, Imported Chocolates, Olive Oil',
          Ratings: 4.7,
        },
        {
          Name: 'City Market',
          Location: '202 Elm Street, Downtown',
          ContactInformation: '(555) 567-8901',
          OpeningHours: '24 Hours',
          Products: 'Fresh Fruits, Vegetables, Meat, Dairy, Bakery',
          Ratings: 4.2,
        },
      ],
      UserAccount: [
        {
          Username: 'AlexDoe',
          Email: 'alexdoe@example.com',
          Password: 'password123',
          Name: 'Alex Doe',
          ProfilePicture: 'https://example.com/profiles/alex.jpg',
          ShoppingLists: 1,
          DietaryPreferences: 2,
          History: 3,
          Budget: 500,
          Theme: 'Dark',
        },
        {
          Username: 'BettySmith',
          Email: 'bettysmith@example.com',
          Password: 'securePass456',
          Name: 'Betty Smith',
          ProfilePicture: 'https://example.com/profiles/betty.jpg',
          ShoppingLists: 2,
          DietaryPreferences: 3,
          History: 4,
          Budget: 300,
          Theme: 'Light',
        },
        {
          Username: 'CharlieG',
          Email: 'charlieg@example.com',
          Password: 'myPassword789',
          Name: 'Charlie G',
          ProfilePicture: 'https://example.com/profiles/charlie.jpg',
          ShoppingLists: 3,
          DietaryPreferences: 4,
          History: 5,
          Budget: 450,
          Theme: 'Dark',
        },
        {
          Username: 'DanaK',
          Email: 'danak@example.com',
          Password: 'pass123Dana',
          Name: 'Dana K',
          ProfilePicture: 'https://example.com/profiles/dana.jpg',
          ShoppingLists: 4,
          DietaryPreferences: 5,
          History: 1,
          Budget: 550,
          Theme: 'Light',
        },
        {
          Username: 'EvanM',
          Email: 'evanm@example.com',
          Password: 'EvanMpass456',
          Name: 'Evan M',
          ProfilePicture: 'https://example.com/profiles/evan.jpg',
          ShoppingLists: 5,
          DietaryPreferences: 1,
          History: 2,
          Budget: 600,
          Theme: 'Dark',
        },
      ],
      ListHistory: [
        {
          ShoppingList: 1,
          Date: '2023-04-01T10:00:00Z',
          ProductsAdded: 'Milk, Eggs, Bread',
          ProductsRemoved: 'Soda, Chips',
          Notes: 'Switched to whole grain bread',
        },
        {
          ShoppingList: 2,
          Date: '2023-04-02T15:30:00Z',
          ProductsAdded: 'Apples, Bananas, Chicken Breast',
          ProductsRemoved: 'Beef, Ice Cream',
          Notes: 'Going for a healthier option',
        },
        {
          ShoppingList: 3,
          Date: '2023-04-03T09:45:00Z',
          ProductsAdded: 'Spinach, Kale, Almonds',
          ProductsRemoved: 'Potato Chips, Chocolate',
          Notes: 'Added more greens and nuts for diet',
        },
        {
          ShoppingList: 4,
          Date: '2023-04-04T17:20:00Z',
          ProductsAdded: 'Quinoa, Avocado, Salmon',
          ProductsRemoved: 'White Rice, Pork',
          Notes: 'Focusing on Omega-3 and good fats',
        },
        {
          ShoppingList: 5,
          Date: '2023-04-05T12:10:00Z',
          ProductsAdded: 'Greek Yogurt, Blueberries, Granola',
          ProductsRemoved: 'Flavored Yogurt, Cookies',
          Notes: 'Preparing for a balanced breakfast',
        },
      ],
      ExpirationDateReminder: [
        {
          Product: 'Milk',
          ExpirationDate: '2023-05-01T00:00:00',
          ReminderDate: '2023-04-24T00:00:00',
          User: 1,
        },
        {
          Product: 'Eggs',
          ExpirationDate: '2023-05-05T00:00:00',
          ReminderDate: '2023-04-28T00:00:00',
          User: 2,
        },
        {
          Product: 'Yogurt',
          ExpirationDate: '2023-05-10T00:00:00',
          ReminderDate: '2023-05-03T00:00:00',
          User: 3,
        },
        {
          Product: 'Cheese',
          ExpirationDate: '2023-05-15T00:00:00',
          ReminderDate: '2023-05-08T00:00:00',
          User: 4,
        },
        {
          Product: 'Butter',
          ExpirationDate: '2023-05-20T00:00:00',
          ReminderDate: '2023-05-13T00:00:00',
          User: 5,
        },
      ],
      BudgetTracker: [
        {
          User: 1,
          BudgetAmount: 500,
          CurrentSpending: 150,
          RemainingBudget: 350,
          RecommendedProducts: 'Eggs, Milk, Bread, Apples',
        },
        {
          User: 2,
          BudgetAmount: 300,
          CurrentSpending: 80,
          RemainingBudget: 220,
          RecommendedProducts: 'Bananas, Chicken, Rice, Tomatoes',
        },
        {
          User: 3,
          BudgetAmount: 400,
          CurrentSpending: 200,
          RemainingBudget: 200,
          RecommendedProducts: 'Oats, Almond Milk, Spinach, Oranges',
        },
        {
          User: 4,
          BudgetAmount: 250,
          CurrentSpending: 50,
          RemainingBudget: 200,
          RecommendedProducts: 'Pasta, Tomato Sauce, Cheese, Lettuce',
        },
        {
          User: 5,
          BudgetAmount: 600,
          CurrentSpending: 400,
          RemainingBudget: 200,
          RecommendedProducts: 'Salmon, Quinoa, Broccoli, Blueberries',
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource(
        'EssentialItemCategoryEntity',
        data.EssentialItemCategory,
      );
      await this.SeedResource('ShoppingListEntity', data.ShoppingList);
      await this.SeedResource('PriceComparisonEntity', data.PriceComparison);
      await this.SeedResource(
        'DietaryPreferencesEntity',
        data.DietaryPreferences,
      );
      await this.SeedResource('GroceryStoreEntity', data.GroceryStore);
      await this.SeedResource('UserAccountEntity', data.UserAccount);
      await this.SeedResource('ListHistoryEntity', data.ListHistory);
      await this.SeedResource(
        'ExpirationDateReminderEntity',
        data.ExpirationDateReminder,
      );
      await this.SeedResource('BudgetTrackerEntity', data.BudgetTracker);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
